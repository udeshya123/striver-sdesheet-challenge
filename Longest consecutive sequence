approach1-We can simply sort the array and run a for loop to find the longest consecutive sequence

#include<bits/stdc++.h>
using namespace std;
int longestConsecutive(vector<int> nums) {
        if(nums.size() == 0 ){
            return 0;
        }
        
        sort(nums.begin(),nums.end());
        
        int ans = 1;
        int prev = nums[0];
        int cur = 1;
        
        for(int i = 1;i < nums.size();i++){
            if(nums[i] == prev+1){
                cur++;
            }
            else if(nums[i] != prev){
                cur = 1;
            }
            prev = nums[i];
            ans = max(ans, cur);
        }
        return ans;
    }


APPROACH-2  FINDING MIN AND GOIUNG ON FINDING MIN+1,MIN+2....SOON

#include<bits/stdc++.h>

using namespace std;
int longestConsecutive(vector < int > & nums) {
  set < int > hashSet;
  for (int num: nums) {
    hashSet.insert(num);
  }

  int longestStreak = 0;

  for (int num: nums) {
    if (!hashSet.count(num - 1)) {
      int currentNum = num;
      int currentStreak = 1;

      while (hashSet.count(currentNum + 1)) {
        currentNum += 1;
        currentStreak += 1;
      }

      longestStreak = max(longestStreak, currentStreak);
    }
  }

  return longestStreak;
}


OR

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
    int n=nums.size();
    unordered_set<int> s;
    for(int i=0;i<n;i++){
        s.insert(nums[i]);
    }
    int ans=0;
    for(int i=0;i<n;i++){
        if(s.find(nums[i]-1)!=s.end())
            continue;
        else{
            int count=0;
            int current=nums[i];
            while(s.find(current)!=s.end()){
                count++;
                current++;
            }
            ans=max(ans,count);
        }
    }
    return ans;
    }
};


approach -4
#include <bits/stdc++.h> 
int lengthOfLongestConsecutiveSequence(vector<int> &nums, int n) {
    // Write your code here.
    unordered_set<int> s;//(nums.begin(),nums.end()); // this is faster
        
        for(int i = 0; i<n; i++)
        {
            s.insert(nums[i]);
        }
        
        int longest_sequence = 0;
        
        for(int i=0; i<n; i++)
        {
            if(s.find(nums[i] - 1)!=s.end())
                continue;
            
            else
            {
                int count = 0;
                int current_element = nums[i];
                
                while(s.find(current_element) != s.end())
                {
                    count++;
                    current_element++;
                }
                
                longest_sequence = max(longest_sequence,count);
            }
        }
        
        return longest_sequence;
    }

