APPROACH 1 CALCULATING LENGTH REDUCING DIFFERENCE BY INCREMENT OTHER BY LENGTH DIFF AND THEN TRAVERSING



int length(Node* head){
           int count = 0;
           while(head!=NULL){
           count++;
           head = head->next;
           }
           return count;
 }
int findIntersection(Node *firstHead, Node *secondHead){
          if(firstHead == NULL || secondHead == NULL) return -1;
          Node* temp1 = firstHead;
          Node* temp2 = secondHead;
          int l1 = length(temp1);
          int l2 = length(temp2);
          if(l1-l2 < 0){
          int diff = l2-l1;
          while(diff--) temp2 = temp2->next;
          }
          else{
          int diff = l1-l2;
          while(diff--) temp1 = temp1->next;
          }
          while(temp1!=temp2 && temp1->next!=NULL && temp2->next!=NULL){
          temp1 = temp1->next;
          temp2 = temp2->next;
          }
          if(temp1 == temp2) return temp1->data;
          else return -1;
    }
    
    
    APPROACH 2//LC SOLN
    
    class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) 
{
    ListNode *p1 = headA;
    ListNode *p2 = headB;
        
    if (p1 == NULL || p2 == NULL) return NULL;

    while (p1 != NULL && p2 != NULL && p1 != p2) {
        p1 = p1->next;
        p2 = p2->next;

        //
        // Any time they collide or reach end together without colliding 
        // then return any one of the pointers.
        //
        if (p1 == p2) return p1;

        //
        // If one of them reaches the end earlier then reuse it 
        // by moving it to the beginning of other list.
        // Once both of them go through reassigning, 
        // they will be equidistant from the collision point.
        //
        if (p1 == NULL) p1 = headB;
        if (p2 == NULL) p2 = headA;
    }
        
    return p1;
}
};
